---
title: "Lab 3"
output: github_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, eval = FALSE)

library(RSQLite)
my_con = dbConnect(SQLite(), "drinks.db")
```

## General instructions
rubric={mechanics:2}

- This assignment is to be completed in SQL, submitting both a .Rmd markdown file you create in RStudio along with a rendered/knit .md file. *Reminder - to make a .Rmd knit to .md ensure the output in the YAML of the .Rmd is set to: output: github_document.*
- I have noticed some bugs with SQL code in Rmarkdown, specially with the `WITH` clause. If you have a similar problem, make `eval = FALSE` in the respective code chunk so you will be able to knit. (In these cases, I also suggest you trying your code using sqlite3 in the shell to make sure that it works). 
- Make sure to follow the [general lab instructions](https://ubc-mds.github.io/resources_pages/general_lab_instructions/).
- Remember to set up the appropriate working directory.

## Context

For this lab, consider the following database schema:

* HasOnMenu(**_Bar_**, **_DrinkId_**, Price)

* Orders(**_Person_**, **_Date_**, Bar, **_DrinkId_**, Quantity)

* DrinkInfo(**_DrinkId_**, Type)

The `drinkInfo` relation specifies for each drinkId what type of drink it is, e.g., beer, wine, etc.

(Note: the bold-italic formatting represents a primary key.)

## Part 1 - Conceptual 

### **Exercise 1.1**
rubric={reasoning:2}

In one short paragraph, describe the implications of moving the "Price" attribute from the _HasOnMenu_ relation (1) to the _drinkInfo_ relation, or (2) to the _orders_ relation.

### **Exercise 1.2**
rubric={reasoning:1}

Very briefly (really!) explain why (or why not) the database schema can capture the following situation:
_"A person visits multiple bars on the same date"_.


### **Exercise 1.3**
rubric={reasoning:1}

Briefly, explain the difference between `COUNT(*)` and `COUNT(column_name)`, where `column_name` is the name of a column in a table.

## Part 2

### **Exercise 2.1**
rubric={accuracy:2}

Retrieve the bar name and the average price of each bar. Order the results from the most expensive to the cheapest bar (in average).

```{sql Exercise 2.1, connection = my_con}
-- TODO: replace this comment with your code.
```

### **Exercise 2.2**
rubric={accuracy:2}

Which bar sells the cheapest drink? What drink is that? What is the price?

```{sql Exercise 2.2, connection = my_con}
-- TODO: replace this comment with your code.
```


### **Exercise 2.3** 
rubric={accuracy:2}

Retrieve the number of beers sold by each bar.

```{sql Exercise 2.3, connection = my_con}
-- TODO: replace this comment with your code.
```

### **Exercise 2.4 - HAVING clause**
rubric={accuracy:2}

Write a SQL query with the HAVING clause to capture the following statement: _"Find bars that do **not** serve a drink at a price under $20."_. 

```{sql Exercise 2.4, connection = my_con}
-- TODO: replace this comment with your code.
```

### **Exercise 2.5 (Optional)**
rubric={accuracy:2}

Write a SQL query with the EXISTS clause to capture the following statement: _"Find bars that do **not** serve a drink at a price under $20."_. 

```{sql Exercise 2.5, connection = my_con}
-- TODO: replace this comment with your code.
```

### **Exercise 2.6** - INTERSECT
rubric={accuracy:2}

What bars sell both, wine and whisky? Use the INTERSECT clause.

```{sql Exercise 2.6, connection = my_con}
-- TODO: replace this comment with your code.
```

### **Exercise 2.7** (Optional)
rubric={accuracy:4}

Considering only the bars that sell both, whisky and wine, which bars sold more wine than whisky? (Hint: There's only one bar.)

```{sql Exercise 2.7, connection = my_con}
-- TODO: replace this comment with your code.
```

### **Exercise 2.8**
rubric={accuracy:2}

For each person, find the bar they visit, and the type(s) and price(s) of the drink(s) they drink during those visits.

```{sql Exercise 2.8, connection = my_con}
-- TODO: replace this comment with your code.
```

### **Exericise 2.9**
rubric={accuracy:2}

Find all the people who spent more money than the average person on drinks.

```{sql Exercise 2.9, connection = my_con}
-- TODO: replace this comment with your code.
```

### **Exericise 2.10**
rubric={accuracy:2}

Find the people who ordered both wine and beer from the same bar on a single visit, as well as the quantity and prices of those drinks (the beer and wine) they ordered on that visit.

```{sql Exercise 2.10, connection = my_con}
-- TODO: replace this comment with your code.
```

### **Exericise 2.11** (Optional)
rubric={accuracy:3}

Find the people who ordered both wine and beer from the same bar on a single visit, as well as the quantity and prices of _all_ drinks they ordered on that visit.

```{sql Exercise 2.11, connection = my_con}
-- TODO: replace this comment with your code.
```

### **Exercise 2.12** - Correlated Subqueries
rubric={accuracy:2}

Retrieve `bar`, `type`, and `price` of the drinks in the menus that have higher prices than the average of their corresponding type.

```{sql Exercise 2.12, connection = my_con}
-- TODO: replace this comment with your code.
```

```{r}
dbDisconnect(my_con)
```
